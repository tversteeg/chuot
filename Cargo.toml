[package]
name = "pixel-game-lib"
version = "0.9.0-alpha.4"
edition = "2021"
authors = ["Thomas Versteeg <t@versteeg.email>"]
license = "AGPL-3.0"
homepage = "https://github.com/tversteeg/pixel-game-lib"
readme = "README.md"
description = "AGPL licensed and opinionated game engine for pixel-art games"
documentation = "https://docs.rs/pixel-game-lib"
repository = "https://github.com/tversteeg/pixel-game-lib.git"
keywords = ["gamedev", "utility"]
categories = [
	"games",
	"game-engines",
]
rust-version = "1.77.0"
include = ["/src"]

[features]
default = ["hot-reloading-assets", "dialogue", "audio", "in-game-profiler"]

# Enable assets and hot-reload assets from disk when they are saved.
#
# Has no effect when building for the web.
hot-reloading-assets = ["assets_manager/hot-reloading"]

# Enable assets and include them all in the binary.
#
# Always enabled when building for the web.
#
# This feature takes precedence over `hot-reloading-assets` when both are set.
embedded-assets = ["assets_manager/embedded"]

# Integrate [Yarn Spinner](https://www.yarnspinner.dev/), a friendly DSL for writing dialogue.
dialogue = ["dep:yarnspinner"]

# Allow playing music and sounds using the [Kira](https://docs.rs/kira/latest/kira/) crate.
audio = ["dep:kira"]

# Show an in-game profiler
in-game-profiler = [
	"profiling/profile-with-puffin",
	"dep:egui",
	"dep:egui-wgpu",
	"dep:egui-winit",
	"dep:puffin_egui",
	"dep:puffin",
	"dep:stats_alloc",
]

[dependencies]
miette = "7.2.0"
serde = { version = "1.0.197", features = ["derive"] }
bytemuck = { version = "1.15.0", features = ["derive"] }
bitvec = "1.0.1"
log = "0.4.21"
hashbrown = "0.14.3"
png = "0.17.13"
profiling = "1.0.15"
winit = "0.29.15"
winit_input_helper = "0.16.0"
glam = { version = "0.27", features = ["bytemuck", "fast-math"] }
glamour = { version = "0.11.1", features = ["serde"] }
packr2 = "0.3.3"
parking_lot = "0.12.1"

# `dialogue` feature

yarnspinner = { version = "0.2.0", optional = true }

# `audio` feature

kira = { version = "0.8.7", default-features = false, features = ["cpal", "ogg", "serde"], optional = true }

# `in-game-profiler` feature

egui = { version = "0.26.2", features = ["default_fonts"], optional = true }
egui-wgpu = { version = "0.26.2", optional = true }
egui-winit = { version = "0.26.2", default-features = false, features = ["wayland"], optional = true }
puffin_egui = { version = "0.26.0", optional = true }
stats_alloc = { version = "0.1.10", optional = true }

# Dependencies specifically for desktop
[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
assets_manager = { version = "0.11.4", default-features = false, features = ["toml", "ahash", "macros"] }
wgpu = "0.19.3"

pollster = "0.3.0"
env_logger = "0.11.3"

# `in-game-profiler` feature

puffin = { version = "0.19.0", optional = true }

# Dependencies specifically for WASM
[target.'cfg(target_arch = "wasm32")'.dependencies]
assets_manager = { version = "0.11.4", default-features = false, features = ["toml", "embedded", "ahash", "macros"] }
# Not used directly but the JS feature is required by the 'ahash' feature in `assets_manager`
getrandom = { version = "0.2", features = ["js"] }

wgpu = { version = "0.19.3", default-features = false, features = ["webgl", "wgsl"] }
console_log = "1.0.0"
web-sys = { version = "0.3.69", features = ["Document", "Window", "Element"] }
wasm-bindgen = "0.2.92"
wasm-bindgen-futures = "0.4.42"
console_error_panic_hook = "0.1.7"

# `in-game-profiler` feature

puffin = { version = "0.19.0", features = ["web"], optional = true }

[target.'cfg(not(target_arch = "wasm32"))'.dev-dependencies]
# Show nice output for the examples
miette = { version = "7.2.0", features = ["fancy"] }

[target.'cfg(target_arch = "wasm32")'.dev-dependencies]
# Show nice output for the examples
miette = { version = "7.2.0", features = ["fancy-no-syscall"] }

[[example]]
name = "window"

[[example]]
name = "sprite"

[[example]]
name = "custom_asset"

[[example]]
name = "audio"
required-features = ["audio"]

[workspace]
members = ["run-wasm"]

# Ensure audio performance is not too poor when running in dev mode
[profile.dev.package]
kira.opt-level = 3
cpal.opt-level = 3
symphonia.opt-level = 3
symphonia-format-ogg.opt-level = 3
symphonia-codec-vorbis.opt-level = 3
